

================================================================
Breakpoint Examples

===================================
Use these examples for always-enabled breakpoints.
One stores a descriptor code in A, the other in AR7.
Use a different code for each breakpoint to know which one caused the halt.

;debug mks
	ld		#01h,A
	intr	2					; breakpoint halt
;debug mks end

;debug mks
	stm		#6, AR7
	intr	2					; breakpoint halt
;debug mks end

NOTE NOTE NOTE - breakpoints in an interrupt routine

If executing "intr 2" inside an interrupt routine, it should only be done just
before the rete instruction. The "intr 2" call will re-enable global interrupts.
Even trying to disable them immediately after the call won't work -- a pending
interrupt will be caught between the "intr 2" and the next instruction setting
the INTM flag. If the call is made earlier in the routing, the global interrupts
being enabled will allow other interrupts to be processed (including a recursive
call back the the current routine) which can cause problems in some code.

Since the storeRegisters function destroys older data on the stack, to see what called the function which called storeRegisters use popm/pshm to retrieve that prior address into the A and/or B register before invoking the INTR. Using both registers allows for the two previous return addresses to be viewed.

;debug mks
	popm	AL
	pshm	AL
	stm		#5, AR7
	intr	2					; breakpoint halt
;debug mks end


===================================
Controlled Breakpoint

Insert this code for a breakpoint which only triggers if appropriate bit is set in breakPointControl variable.
After another breakpoint stops the DSP, user sets the bit in breakPointControl (address 0x81) to then enable
this breakpoint. Useful for when this breakpoint gets encounter many times but is only of interest after
some other breakpoint has triggered.

;debug mks -- breakpoint
	ld      #Variables1, DP
	stm		#8, AR7
	bitf	breakPointControl, #01h
	cc		storeRegistersAndHalt, TC  NOTE-- change this to use "XC" and "intr 2"!
;debug mks end


===================================
Sample Code

Use this code to create a continuous breakpoint which simply increments the A register -- used to verify that
the breakpoint system is working.


;debug mks
	ld		#1, A				;debug mks
d1:	
	intr	2					; breakpoint halt
	add		#1, A
	b		d1
;debug mks end 	
 
================================================================
